name: UAT Deploy (pick labeled PRs)

on:
  workflow_run:
    workflows: ["Auto Tag from Merge"]
    types: [completed]

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: uat
  cancel-in-progress: true

jobs:
  build-and-push-uat:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'uat' }}
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.settag.outputs.docker_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          fetch-depth: 0

      - name: Configure Git identity (needed for cherry-pick)
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Ensure jq is available
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Collect merged PRs labeled promote:uat not yet in UAT
        id: collect
        env:
          GH_TOKEN: ${{ github.token }}   # same as secrets.GITHUB_TOKEN
          REPO: ${{ github.repository }}
        shell: bash
        run: |
          set -euo pipefail
          BASE=uat
          git fetch origin "$BASE" --prune --tags

          # Get merged PRs with label and base develop
          gh pr list --repo "$REPO" --state merged \
            --search 'label:"promote:uat" base:develop' --limit 200 \
            --json number,mergeCommit,mergedAt \
            | jq -r '
                map(select(.mergeCommit != null))
                | sort_by(.mergedAt)
                | .[]
                | "\(.number) \(.mergeCommit.oid) \(.mergedAt)"' \
            > /tmp/all.txt

          : > /tmp/todo.txt
          while read -r num sha mergedAt; do
            [ -z "${num:-}" ] && continue
            # Skip if already contained in origin/uat
            if git merge-base --is-ancestor "$sha" "origin/$BASE"; then
              echo "PR #$num already in $BASE"
            else
              echo "$num $sha" >> /tmp/todo.txt
            fi
          done < /tmp/all.txt

          if [ -s /tmp/todo.txt ]; then
            echo "To cherry-pick:"
            cat /tmp/todo.txt
            echo "pairs=$(paste -sd, /tmp/todo.txt)" >> "$GITHUB_OUTPUT"
            echo "prs=$(cut -d' ' -f1 /tmp/todo.txt | paste -sd, -)" >> "$GITHUB_OUTPUT"
          else
            echo "pairs=" >> "$GITHUB_OUTPUT"
            echo "prs=" >> "$GITHUB_OUTPUT"
            echo "No new labeled PRs to include."
          fi

      - name: Prepare ephemeral UAT composition
        shell: bash
        run: |
          set -euo pipefail
          git checkout -B uat-ephemeral origin/uat
          if [ -n "${{ steps.collect.outputs.pairs }}" ]; then
            IFS=',' read -ra ITEMS <<< "${{ steps.collect.outputs.pairs }}"
            for item in "${ITEMS[@]}"; do
              num="${item%% *}"
              sha="${item##* }"
              echo "Cherry-picking PR #$num ($sha)"
              parents=$(git cat-file -p "$sha" | grep -c '^parent ' || true)
              if [ "$parents" -ge 2 ]; then
                git cherry-pick -x -m 1 "$sha"
              else
                git cherry-pick -x "$sha"
              fi
            done
          else
            echo "No PRs to cherry-pick; building plain UAT."
          fi

      - name: Set Docker tag
        id: settag
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force
          BR="${{ github.event.workflow_run.head_branch }}"
          # Expect tags like: main-v1.2.3, develop-v1.2.3, uat-v1.2.3
          TAG=$(git tag --sort=-creatordate | grep -E "^(${BR})-v[0-9]+\.[0-9]+\.[0-9]+$" | head -n 1 || true)
          if [ -z "$TAG" ]; then
            echo "No matching tag found for branch '$BR'." >&2
            exit 1
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "docker_tag=${{ steps.tag.outputs.tag }}" >> "$GITHUB_OUTPUT"
          echo "Using docker tag: $TAG"

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push UAT image (ephemeral state)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            apexdev23/sms-gw:${{ steps.settag.outputs.docker_tag }}
            apexdev23/sms-gw:latest-uat

  deploy-uat:
    needs: build-and-push-uat
    runs-on: [self-hosted, uat]
    steps:
      - uses: actions/checkout@v4
      - name: Docker login on server
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Deploy App
        run: |
          cd ~/sms-gw
          ./deploy.sh ${{ needs.build-uat-ephemeral.outputs.docker_tag }}

name: CI/CD UAT Deploy

on:
  workflow_run:
    workflows: ["CI/CD UAT Prepare"]
    types: [completed]

permissions:
  actions: read
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: uat
  cancel-in-progress: true

jobs:
  build-and-push:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq + gh
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Debug
        run: |
          echo "workflow_run.id=${{ github.event.workflow_run.id }}"
          echo "workflow_run.workflow_id=${{ github.event.workflow_run.workflow_id }}"
          echo "workflow_run.conclusion=${{ github.event.workflow_run.conclusion }}"
          echo "repo=${{ github.repository }}"

      - name: Debug
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          gh api repos/$REPO/actions/runs/${{ github.event.workflow_run.id }}/artifacts \
            | jq -r '.artifacts[] | [.name, .id, .expired] | @tsv'

      - name: Download deployment artifacts from Prepare run
        uses: actions/download-artifact@v4
        with:
          name: deployment-data
          run-id: ${{ github.event.workflow_run.id }}

      - name: Read inputs from artifact
        id: inputs
        run: |
          set -euo pipefail
          if [ ! -f docker_tag.txt ]; then echo "docker_tag.txt missing"; exit 1; fi
          TAG=$(cat docker_tag.txt)
          PRS=$( [ -f pr_numbers.txt ] && cat pr_numbers.txt || echo "" )

          echo "docker_tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "prs=$PRS" >> "$GITHUB_OUTPUT"

          # If there are no PRs to deploy, we can exit gracefully later
          if [ -z "$PRS" ]; then
            echo "no_prs=true" >> "$GITHUB_OUTPUT"
          else
            echo "no_prs=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build uat-candidate branch
        if: ${{ steps.inputs.outputs.no_prs == 'false' }}
        run: |
          set -euo pipefail
          git fetch origin uat
          git checkout -B uat-candidate origin/uat
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if [ ! -f commits.txt ]; then
            echo "No commits.txt found"; exit 1
          fi

          while read -r commit; do
            [ -z "$commit" ] && continue
            echo "Attempting to cherry-pick $commit"
            if git merge-base --is-ancestor "$commit" HEAD 2>/dev/null; then
              echo "Commit $commit already in history"; continue
            fi
            if git show --no-patch --format="%P" "$commit" | grep -q " "; then
              git cherry-pick -x -m 1 "$commit" || { echo "Empty/conflict, skipping"; git cherry-pick --skip; }
            else
              git cherry-pick -x "$commit" || { echo "Empty/conflict, skipping"; git cherry-pick --skip; }
            fi
          done < commits.txt

          git push origin uat-candidate --force

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push Docker image
        if: ${{ steps.inputs.outputs.no_prs == 'false' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            apexdev23/sms-gw:${{ steps.inputs.outputs.docker_tag }}
            apexdev23/sms-gw:latest-uat

      - name: Remove label with gh
        if: ${{ success() }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          IFS=',' read -ra arr <<< "${{ steps.inputs.outputs.prs }}"
          for num in "${arr[@]}"; do
            [ -z "$num" ] && continue
            echo "Removing 'promote:uat' from PR #$num"
            gh pr edit "$num" --remove-label "promote:uat"
          done

      - name: Upload tag as job output (for next job)
        id: out
        run: echo "docker_tag=${{ steps.inputs.outputs.docker_tag }}" >> "$GITHUB_OUTPUT"

  deploy-uat:
    needs: build-and-push
    if: ${{ needs.build-and-push.result == 'success' }}
    runs-on: [self-hosted, uat]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Docker login on server
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Deploy App
        run: |
          cd ~/sms-gw
          ./deploy.sh "${{ needs.build-and-push.outputs.docker_tag || '' }}"

      - name: Fast-forward uat to candidate and tag
        run: |
          set -euo pipefail
          git fetch origin uat uat-candidate
          git checkout uat
          git merge origin/uat-candidate --ff-only
          git push origin uat
          VERSION="${{ needs.build-and-push.outputs.docker_tag || '' }}"
          [ -z "$VERSION" ] && { echo "No version found"; exit 1; }
          git tag -f "$VERSION"
          git push origin "$VERSION" --force

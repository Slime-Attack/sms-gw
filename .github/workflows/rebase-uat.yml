name: CI/CD UAT Deploy

on:
  workflow_run:
    workflows: ["Auto Tag from Merge"]
    types: [completed]

permissions:
  contents: write
  pull-requests: read

concurrency:
  group: uat
  cancel-in-progress: true

jobs:
  identify-prs:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'uat' }}
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.decide.outputs.should_deploy }}
      prs_included: ${{ steps.filter.outputs.prs_included }}
      prs_excluded: ${{ steps.filter.outputs.prs_excluded }}
      commit_shas: ${{ steps.get_commits.outputs.commit_shas }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Determine last UAT tag and timestamp
        id: lasttag
        shell: bash
        run: |
          git fetch --prune --tags origin
          LAST_UAT_TAG="$(git tag --sort=-creatordate | grep -E '^uat-v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || true)"
          if [ -n "${LAST_UAT_TAG:-}" ]; then
            echo "last_uat_tag=${LAST_UAT_TAG}" >> "$GITHUB_OUTPUT"
            LAST_TS_EPOCH="$(git log -1 --format=%ct "${LAST_UAT_TAG}")"
            LAST_TS_ISO="$(date -u -d "@${LAST_TS_EPOCH}" +%Y-%m-%dT%H:%M:%SZ)"
            echo "last_uat_iso=${LAST_TS_ISO}" >> "$GITHUB_OUTPUT"
          else
            echo "last_uat_tag=" >> "$GITHUB_OUTPUT"
            echo "last_uat_iso=" >> "$GITHUB_OUTPUT"
          fi

      - name: Collect merged PRs since last UAT tag
        id: collect
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          LAST_ISO: ${{ steps.lasttag.outputs.last_uat_iso }}
        shell: bash
        run: |
          gh pr list --repo "$REPO" --state merged \
            --search 'base:develop' --limit 200 \
            --json number,mergedAt,labels,mergeCommit \
          | jq -r --arg last "${LAST_ISO:-}" '
              map(select(.mergedAt != null))
              | ( if $last == "" then . else map(select(.mergedAt > $last)) end )
              ' > /tmp/merged_since.json

      - name: Filter PRs by promote:uat label
        id: filter
        shell: bash
        run: |
          jq -r '
            [ .[] | select([.labels[].name] // [] | index("promote:uat")) | .number ] as $inc
            | [ .[] | select( ( [.labels[].name] // [] | index("promote:uat") ) | not ) | .number ] as $exc
            | {included: $inc, excluded: $exc}
          ' /tmp/merged_since.json > /tmp/split.json

          PRS_INCLUDED="$(jq -r '.included | join(",")' /tmp/split.json)"
          PRS_EXCLUDED="$(jq -r '.excluded | join(",")' /tmp/split.json)"

          echo "prs_included=${PRS_INCLUDED}" >> "$GITHUB_OUTPUT"
          echo "prs_excluded=${PRS_EXCLUDED}" >> "$GITHUB_OUTPUT"

      - name: Get commit SHAs for included PRs
        id: get_commits
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        shell: bash
        run: |
          IFS=',' read -ra INCLUDED_PRS <<< "${{ steps.filter.outputs.prs_included }}"
          commit_shas=()

          for pr_number in "${INCLUDED_PRS[@]}"; do
            [ -z "$pr_number" ] && continue
            merge_sha=$(gh pr view "$pr_number" --repo "$REPO" --json mergeCommit -q .mergeCommit.oid)
            if [ -n "$merge_sha" ]; then
              commit_shas+=("$merge_sha")
            fi
          done

          echo "commit_shas=${commit_shas[*]}" >> "$GITHUB_OUTPUT"

      - name: Decide if we should deploy
        id: decide
        shell: bash
        run: |
          if [ -n "${{ steps.filter.outputs.prs_included }}" ]; then
            echo "should_deploy=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_deploy=false" >> "$GITHUB_OUTPUT"
          fi

  build-image:
    needs: identify-prs
    if: ${{ needs.identify-prs.outputs.should_deploy == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.settag.outputs.docker_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Docker tag
        id: settag
        shell: bash
        run: |
          git fetch --tags --force
          TAG="$(git tag --sort=-creatordate | grep -E '^uat-v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || true)"
          if [ -z "${TAG:-}" ]; then
            echo "ERROR: No UAT tag found" >&2
            exit 1
          fi
          echo "docker_tag=${TAG}" >> "$GITHUB_OUTPUT"

      - name: Build & push UAT image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            apexdev23/sms-gw:${{ steps.settag.outputs.docker_tag }}
            apexdev23/sms-gw:latest-uat

  deploy-to-uat:
    needs: [identify-prs, build-image]
    if: ${{ needs.identify-prs.outputs.should_deploy == 'true' }}
    runs-on: [self-hosted, uat]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Create temporary branch with only included PRs
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail

          # Fetch everything
          git fetch --all --prune --tags

          # Create a new branch from current uat
          git checkout uat
          git pull --ff-only
          git checkout -b uat-temp

          # Get the commit SHAs from the first job
          IFS=' ' read -ra COMMIT_SHAS <<< "${{ needs.identify-prs.outputs.commit_shas }}"

          # Cherry-pick each commit (this is simpler than merge commits)
          for commit_sha in "${COMMIT_SHAS[@]}"; do
            [ -z "$commit_sha" ] && continue
            
            echo "Applying changes from commit $commit_sha"
            
            # Get the diff and apply it
            if git cherry-pick "$commit_sha" --allow-empty; then
              echo "Successfully applied commit $commit_sha"
            else
              echo "Failed to apply commit $commit_sha, aborting"
              git cherry-pick --abort
              # Try alternative approach: apply as patch
              git diff "$commit_sha^1" "$commit_sha" | git apply --3way || true
            fi
          done

          # Push the temporary branch
          git push -f origin uat-temp

      - name: Fast-forward uat to temporary branch
        shell: bash
        run: |
          set -euo pipefail
          git checkout uat
          git reset --hard origin/uat-temp
          git push origin uat

          # Clean up temporary branch
          git push origin --delete uat-temp || true

      - name: Deploy application
        shell: bash
        run: |
          cd ~/sms-gw
          ./deploy.sh ${{ needs.build-image.outputs.docker_tag }}

      - name: Update UAT tag
        shell: bash
        run: |
          git fetch --tags --force
          git checkout uat
          git pull --ff-only

          TAG="${{ needs.build-image.outputs.docker_tag }}"
          git tag -f "$TAG"
          git push origin "$TAG" --force

      - name: Remove promote:uat labels
        if: ${{ success() && needs.identify-prs.outputs.prs_included != '' }}
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        shell: bash
        run: |
          IFS=',' read -ra PR_NUMBERS <<< "${{ needs.identify-prs.outputs.prs_included }}"
          for pr_number in "${PR_NUMBERS[@]}"; do
            [ -z "$pr_number" ] && continue
            gh pr edit "$pr_number" --remove-label "promote:uat" --repo "$REPO" || true
          done
